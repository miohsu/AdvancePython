"""
    del 和 垃圾回收
    1.
    del 语句删除的是引用而不是对象。
    当对象的引用数归 0 或无法得到对象时，对象会被当作垃圾进行回收。
    重新绑定也会导致引用数减 1

    2.
    CPyhton 的垃圾回收机制是引用计数，当引用计数归零时，对象就被销毁。
    CPython 2.0 中增加了分代回收机制，用于检测循环引用中涉及的对象组。

    3.
    弱引用
    正式因为引用，对象才会在内存中存在。当对象的引用数量归零后，垃圾回收程序会把对象销毁。但是有时候需要引用对象，而不让对象存在的时间超过所需时间。这经常用在缓存中。
    - 弱引用不会增加对象的引用数量。
    - 弱引用不会影响所指对象被当作垃圾回收。
    - 弱引用在缓存中使用较多。
"""

import weakref

a_set = {0, 1}
wref = weakref.ref(a_set)  # 声明一个弱引用
