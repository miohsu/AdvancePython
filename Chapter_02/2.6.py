"""
    序列的增量赋值
    1.
    += 和 *= 的表现取决于他们第一个操作对象

    2.
    += 调用 __iadd__ 特殊方法，用于"就地加"
    如果没有该方法则调用 __add__ 方法
    lst += [1,2] 如果有 __iadd__ 则改变 lst
    如果调用 __add__ 则为 lst = lst + [1,2]

    3.
    可变序列一般都实现了 __iadd__
    不可变序列没有该方法；

    4.
    对不可变序列进行拼接的效率很低，因为每次都生成一个新的对象，str除外

    5.
    下面代码的结果为:
    - t变成 (1, 2, [30, 40, 50, 60])
    - 因为tuple不支持对他的元素赋值，所以会抛出TypeError异常
    具体操作步骤:
    - t[2] 的值存入TOS(Top Of Stack)
    - 计算 TOS += [50, 60]
    - t[2] = TOS 这里失败了，因为t为不可变序列

    总结:
    - 不要把可变对象放在元组里
    - 增量赋值不是原子操作


"""
import dis

b = [50, 60]
t = (1, 2, [30, 40])
# t[2] += [50, 60]
# try:
#     t[2] += [50, 60]
# except TypeError:
#     pass
# print(t)

dis.dis('t[2] += b')
